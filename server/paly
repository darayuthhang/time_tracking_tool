# FROM node:18-alpine

# WORKDIR /usr/app

# COPY package.json knexfile.js ./
# COPY . /usr/app/

# # RUN npm install --global npm && \
# #     npm install --global knex && \
# #     npm install bcrypt && \
# #     npm install && \
# #     npm cache clean --force && \
# #     npm install --prefix client && \
# #     npm run --prefix client build
# # Install server dependencies
# RUN npm install --global npm && \
#     npm install --global knex && \
#     npm install bcrypt && \
#     npm install
# # Build the client
# WORKDIR /usr/app/client
# # Copy client folder from separate location
# COPY ../client/package.json /usr/app/client

# # Install client dependencies
# RUN npm install

# # Build the client
# RUN npm run build
# # Move back to the server folder
# WORKDIR /usr/app
# EXPOSE 5000

# CMD ["npm", "run", "start"]
# Use a lightweight Node.js image as the base image for the React client
# Server Dockerfile

# Stage 1: Build the client
FROM node:18-alpine AS client-build

# Set working directory to the client folder
WORKDIR /usr/app/client

# Copy client-specific files
COPY ../client/package.json ../client/yarn.lock ./

# Install client dependencies
RUN yarn install

# Build the client
RUN yarn build

# Stage 2: Build the server
FROM node:18-alpine AS server-build

# Set working directory to the server folder
WORKDIR /usr/app/server

# Copy server-specific files
COPY package.json knexfile.js ./
COPY . /usr/app/server/

# Install server dependencies
RUN npm install

# Copy the built client from the previous stage
COPY --from=client-build /usr/app/client/build /usr/app/server/client/build

# Expose the desired server port
EXPOSE 5000

# Start the server
CMD ["npm", "start"]
